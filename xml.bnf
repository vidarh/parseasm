
%triggers {
   XMLDECL = 1 .
   STAG = 2 .
   ATTR = 3 .
   ETAG = 4 .
   STAGEND = 5 .
   CHARS = 6 .
   COMMENT = 7 .
   CDATA = 8 .
   ENTITYREF = 9 .
   CHARREF = 10 .
}


document     ::= prolog element MiscMinusChar* RestrictedChar Char* .

; XMLDecl is required for XML, but will often not be present for HTML, hence
; I make it optional and let the higher level parser check for it
prolog	     ::= XMLDecl? Misc* (doctypedecl Misc*)? . 

XMLDecl	     ::= '<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>' /XMLDECL/ .
VersionInfo  ::= S 'version' Eq ("'" VersionNum "'") | ('"' VersionNum '"') .
Eq           ::= S? '=' S? .
VersionNum   ::= ('1.1' | '1.0') -> #1 .
EncodingDecl ::= S 'encoding' Eq (('"' EncName -> #2 '"') | ("'" EncName -> #2 "'") ) .
EncName	     ::= [A-Za-z] ([A-Za-z0-9._] | '-')* .
SDDecl	     ::= S 'standalone' Eq (("'" ('yes' | 'no') -> #3 "'") | ('"' ('yes' | 'no') -> #3 '"')) .


Misc         ::= Comment | PI | S .

MiscMinusChar ::= Misc . ; FIXME: Misc* - Char*

doctypedecl  ::= '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>' .
DeclSep	     ::= PEReference | S .
intSubset    ::= (markupdecl | DeclSep)* .
markupdecl   ::= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment .

; element, STag, ETag
element      ::= '<' Name -> #1 /STAG/ (S Attribute)* S?
                 ('>' /STAGEND/ content ETag /ETAG/) |
		 ('/>' /STAGEND/ /ETAG/) .

S	     ::= (#32 | #9 | #13 | #10)+ .

Comment	     ::= '<!--' (([~-] | ('-' [~-]))*) -> #1 '-->' /COMMENT/ .

PI	     ::= '<?' PITarget (S (("?" [~>])|[~?])* )? '?>' .
PITarget     ::= Name . ;- (('X' | 'x') ('M' | 'm') ('L' | 'l'))

ExternalID   ::= ('SYSTEM' S SystemLiteral) | ('PUBLIC' S PubidLiteral S SystemLiteral) .
NDataDecl    ::= S 'NDATA' S Name .

Name         ::= NameStartChar (NameChar)* .
Names        ::= Name (#32 Name)* .
Nmtoken	     ::= (NameChar)+ .
Nmtokens     ::= Nmtoken (#32 Nmtoken)* .


PEReference  ::= '%' Name ';' .

elementdecl  ::= '<!ELEMENT' S Name S contentspec S? '>' .
contentspec  ::= 'EMPTY' | 'ANY' | Mixed | children .

AttlistDecl  ::= '<!ATTLIST' S Name AttDef* S? '>' .
AttDef	     ::= S Name S AttType S DefaultDecl .

EntityDecl   ::=    GEDecl | PEDecl .
GEDecl       ::=  '<!ENTITY' S Name S EntityDef S? '>' .
PEDecl	     ::=  '<!ENTITY' S '%' S Name S PEDef S? '>' .
EntityDef    ::=  EntityValue | (ExternalID NDataDecl?) .
PEDef	     ::=  EntityValue | ExternalID .

NotationDecl ::=  '<!NOTATION' S Name S (ExternalID | PublicID) S? '>' .
PublicID     ::=  'PUBLIC' S PubidLiteral .

Attribute    ::=  Name -> #1 Eq AttValue -> #2 /ATTR/  .

content	     ::=  (CharData -> #1 /CHARS/ )? ((element | Reference | CDSect | PI | Comment) (CharData -> #1 /CHARS/)?)* .

ETag	     ::=  '</' Name -> #1 S? '>' .


SystemLiteral ::= ('"' [~"]* '"') | ("'" [~']* "'") .
PubidLiteral  ::= ('"' (PubidChar|"'")* '"') | ("'" PubidChar* "'") .
PubidChar     ::= #32 | #13 | #10 | [a-zA-Z0-9] | [-()+,./:=?;!*#@$_%] .

Mixed	      ::= ('(' S? '#PCDATA' (S? '|' S? Name)* S? ')*')
		  | ('(' S? '#PCDATA' S? ')') .

children      ::=    (choice | seq) ('?' | '*' | '+')? .
cp	      ::=    (Name | choice | seq) ('?' | '*' | '+')? .
choice        ::=    '(' S? cp ( S? '|' S? cp )+ S? ')' .
seq           ::=    '(' S? cp ( S? ',' S? cp )* S? ')' .

AttType	      ::=  StringType | TokenizedType | EnumeratedType .
StringType    ::=  'CDATA' .
TokenizedType ::=  'ID'
                 | 'IDREF'
		 | 'IDREFS'
                 | 'ENTITY'
  		 | 'ENTITIES'
		 | 'NMTOKEN'
		 | 'NMTOKENS' .
		 
DefaultDecl    ::= '#REQUIRED' | '#IMPLIED' | (('#FIXED' S)? AttValue) .

EntityValue    ::= ('"' ([~%&"] | PEReference | Reference)* '"')
		 |  ("'" ([~%&'] | PEReference | Reference)* "'") .
		 
AttValue       ::= ('"' ([~<&"] | Reference)* '"')
		|  ("'" ([~<&'] | Reference)* "'") .
		
Reference      ::= EntityRef | CharRef .
EntityRef      ::= '&' Name -> #1 ';' /ENTITYREF/ .

CDSect	       ::=  CDStart (CData*) -> #1 CDEnd /CDATA/ .
CDStart        ::=  '<![CDATA[' .
CData	       ::=  ("]" (("]" [~>]) | [~\]])) | [~\]] .
CDEnd	       ::= ']]>' .

CharData       ::=  (("]]" [~><&]) | [~<&])+ .

EnumeratedType ::=  NotationType | Enumeration .
NotationType   ::=  'NOTATION' S '(' S? Name (S? '|' S? Name)* S? ')' .
Enumeration    ::=  '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')' .

CharRef	       ::=  ('&#' [0-9]+ -> #1 ';')
		 | ('&#x' [0-9a-fA-F]+ -> #2 ';') /CHARREF/ .

; ---- FIXME
RestrictedChar ::= . ; [#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]
Char	       ::= ANY . ; [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

NameStartChar  ::= ":" | [A-Z] | "_" | [a-z] .
  ; | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] |
  ; [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] |
  ; [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
NameChar       ::= NameStartChar | "-" | "." | [0-9] . ; | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]

